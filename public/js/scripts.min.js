(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

function disqusLoader() {
    var disqus_shortname = 'timpietrusky';

    // Only load embed.js if a disqus_thread is found in the DOM
    if (document.querySelector('#disqus_thread') !== null) {
        var dsq = document.createElement('script');
        dsq.type = 'text/javascript';
        dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    }
}

module.exports = disqusLoader;

},{}],2:[function(require,module,exports){
'use strict';

// Constructor

function LazyLuke(args) {
  this.w = window;
  this.d = window.document;

  // Elements
  this.elements = this.d.querySelectorAll(args.elements);

  // The String to select the elements
  this.elementSelector = args.elements;

  // Attribute to get the src
  this.srcAttribut = args.srcAttribut;

  // The reference to the handler called in the listener
  this.listenerHandlerReference = null;

  // Add scroll listener
  this.addListener();

  // Load the elements on page load
  this.load();
};

// Override prototype
LazyLuke.prototype = {

  // Set correct constructor
  constructor: LazyLuke,

  // Returns "true" if "el" is visible inside the current viewport.
  // @see http://stackoverflow.com/a/7557433/1012875
  isVisible: function isVisible(el) {
    var r = el.getBoundingClientRect();

    return r.top >= 0 && r.left >= 0 && r.top <= (this.w.innerHeight || this.d.documentElement.clientHeight) && r.right <= (this.w.innerWidth || this.d.documentElement.clientWidth);
  },

  // Load the elements if they are visible and not loaded yet
  load: function load() {

    // There are still elements to load
    if (this.d.querySelectorAll(this.elementSelector).length > 0) {

      for (var i = 0; i < this.elements.length; i++) {
        var el = this.elements[i];

        // The element was not loaded and is not visible
        if (el.getAttribute(this.srcAttribut) !== null && this.isVisible(el)) {

          // Element is an iframe
          if (el.tagName === "IFRAME") {

            // Element src is empty
            if (el.src === "about:blank") {
              // Get the value of "data-js-src" and use it as the new src
              el.src = el.getAttribute(this.srcAttribut);
              // Remove the attribute from the element
              el.removeAttribute(this.srcAttribut);
            }
          } // IFRAME
        } // isVisible
      } // for

      // Every element was loaded
    } else {
        // Remove the listener
        this.removeListener();
      }
  },

  // Add listener
  addListener: function addListener() {
    this.listenerHandlerReference = this.load.bind(this);
    this.d.addEventListener('scroll', this.listenerHandlerReference, false);
  },

  // Remove listener
  removeListener: function removeListener() {
    this.d.removeEventListener('scroll', this.listenerHandlerReference, false);
  }

}; // LazyLuke

module.exports = LazyLuke;

},{}],3:[function(require,module,exports){
'use strict';

function Navigation(args) {

  try {
    // Get the dropdown
    this.el = document.querySelector('[data-js="navigation"]');

    // Get child elements
    this.childs = this.el.querySelectorAll('ul > li');

    // Content
    this.contentArea = document.querySelector('[data-js="content"]');

    // Active category
    this.category_active = '';

    // Active element
    this.element_active = null;

    // Location object
    var _location = window.location,
        parameter_category = null;

    if (typeof _location.hash !== 'undefined') {
      parameter_category = _location.hash.split('#');
      parameter_category = parameter_category[1];
    }

    if (parameter_category != null) {

      // Save the active element
      this.element_active = document.querySelector('[data-js="navigation"] [data-category="' + parameter_category + '"]');

      // Add active attribute
      this.element_active.setAttribute('data-css', 'active');

      // Find elements to hide
      var elements = this.contentArea.querySelectorAll('[data-js="element"]:not([data-category*="' + parameter_category + '"])');

      // Filter elements if the category is not blog (parent of all elements)
      if (parameter_category != "blog") {
        // Iterate over all elements and hide them
        for (var j = 0; j < elements.length; j++) {
          elements[j].setAttribute('data-css', 'hide');
        }
      }
    }

    // Iterate over all childs
    for (var i = 0; i < this.childs.length; i++) {

      // Listen to the click event
      this.childs[i].addEventListener('click', (function (e) {
        // The clicked element
        var child = e.target;

        // Initial value for the active element
        this.element_active = this.element_active == null ? child : this.element_active;

        // Find the current category
        var category = child.getAttribute('data-category');

        // All elements
        var elements_all = this.contentArea.querySelectorAll('[data-js="element"]');

        // The currently selected category is not the same as the last active category
        // Turn the filter on
        if (category !== this.category_active && category !== null) {

          // Save the active category
          this.category_active = category;

          // Change the hash to the current category
          _location.hash = '#' + category;

          // Remove active attribute
          this.element_active.removeAttribute('data-css');

          // Show elements if the category is blog
          if (category == "blog") {
            // Iterate over all elements and show them
            for (var j = 0; j < elements_all.length; j++) {
              elements_all[j].removeAttribute('data-css');
            }
          }

          // There are no elements
          if (elements_all.length == 0) {

            // There are elements
          } else {
              // Prevent default action
              e.preventDefault();

              // Don't hide elements if the category is blog
              if (category != "blog") {
                // Iterate over all elements and show them
                for (var j = 0; j < elements_all.length; j++) {
                  elements_all[j].setAttribute('data-css', 'hide');
                }
              }

              // Save the active element
              this.element_active = child;

              // Add active attribute
              this.element_active.setAttribute('data-css', 'active');

              // Find elements to hide
              var elements = this.contentArea.querySelectorAll('div[data-js="element"][data-category*="' + category + '"]');

              // Filter elements if the category is not blog (parent of all elements)
              if (category != "blog") {
                // Iterate over all elements and hide them
                for (var j = 0; j < elements.length; j++) {
                  elements[j].removeAttribute('data-css');
                }
              } else {
                // Reset hash for home
                _location.hash = '';
              }
            } // There are elements

          // Turn the filter off
        } else {
            // Prevent default action
            e.preventDefault();

            // Iterate over all elements and show them
            //if (category == "blog") {
            for (var j = 0; j < elements_all.length; j++) {
              elements_all[j].removeAttribute('data-css');
            }

            // Save the active category
            this.category_active = null;

            // Change the hash to the current category
            _location.hash = '';

            // Remove active attribute
            this.element_active.removeAttribute('data-css');
            //}
          }
      }).bind(this), false);
    }
  } catch (e) {}
};

module.exports = Navigation;

},{}],4:[function(require,module,exports){
"use strict";

var Navigation = require("./components/navigation.js");
var LazyLuke = require("./components/lazyluke.js");
var disqusLoader = require("./components/disqus.js");

/**
 * Enable HTML5
 */
'article aside footer header nav section time'.replace(/\w+/g, function (n) {
  document.createElement(n);
});

/**
 * Google analytics
 */
(function (i, s, o, g, r, a, m) {
  i['GoogleAnalyticsObject'] = r;i[r] = i[r] || function () {
    (i[r].q = i[r].q || []).push(arguments);
  }, i[r].l = 1 * new Date();a = s.createElement(o), m = s.getElementsByTagName(o)[0];a.async = 1;a.src = g;m.parentNode.insertBefore(a, m);
})(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

ga('create', 'UA-5596313-1', 'auto');
ga('send', 'pageview');

/**
 * Load disqus
 */
new disqusLoader();

// Main navigation
var navigation = new Navigation();

/**
 * HighlightJS
 */
// At least one <code> element is on the page
if (document.getElementsByTagName('code').length > 0) {
  hljs.initHighlighting();
}

var myLoader = new LazyLuke({
  elements: '[data-js-src]',
  srcAttribut: 'data-js-src'
});

// var content_elements = document.querySelectorAll('[data-js="element"]');

// // There are content elements on the current page
// if (content_elements.length > 0) {

//   for (var i = 0; i < content_elements.length; i++) {
//     content_elements[i].addEventListener(
//       'click',
//       function(e) {
//         e.preventDefault();
//       },
//       false
//     );

//   };
// }

},{"./components/disqus.js":1,"./components/lazyluke.js":2,"./components/navigation.js":3}]},{},[4]);
